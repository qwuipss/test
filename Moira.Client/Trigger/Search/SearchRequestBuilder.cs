// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Moira.Client.Models.Api;
using Moira.Client.Models.Dto;
using Moira.Client.Trigger.Search.Pager;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Moira.Client.Trigger.Search
{
    /// <summary>
    /// Builds and executes requests for operations under \trigger\search
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SearchRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The pager property</summary>
        public global::Moira.Client.Trigger.Search.Pager.PagerRequestBuilder Pager
        {
            get => new global::Moira.Client.Trigger.Search.Pager.PagerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Moira.Client.Trigger.Search.SearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/trigger/search{?createPager*,createdBy*,onlyProblems*,p*,pagerID*,size*,text*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Moira.Client.Trigger.Search.SearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/trigger/search{?createPager*,createdBy*,onlyProblems*,p*,pagerID*,size*,text*}", rawUrl)
        {
        }
        /// <summary>
        /// You can also add filtering by tags, for this purpose add query parameters tags[0]=test, tags[1]=test1 and so onFor example, `/api/trigger/search?tags[0]=test&amp;tags[1]=test1`
        /// </summary>
        /// <returns>A <see cref="global::Moira.Client.Models.Dto.TriggersList"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Moira.Client.Models.Api.ErrorInvalidRequestExample">When receiving a 400 status code</exception>
        /// <exception cref="global::Moira.Client.Models.Api.ErrorNotFoundExample">When receiving a 404 status code</exception>
        /// <exception cref="global::Moira.Client.Models.Api.ErrorRenderExample">When receiving a 422 status code</exception>
        /// <exception cref="global::Moira.Client.Models.Api.ErrorInternalServerExample">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Moira.Client.Models.Dto.TriggersList?> GetAsync(Action<RequestConfiguration<global::Moira.Client.Trigger.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Moira.Client.Models.Dto.TriggersList> GetAsync(Action<RequestConfiguration<global::Moira.Client.Trigger.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Moira.Client.Models.Api.ErrorInvalidRequestExample.CreateFromDiscriminatorValue },
                { "404", global::Moira.Client.Models.Api.ErrorNotFoundExample.CreateFromDiscriminatorValue },
                { "422", global::Moira.Client.Models.Api.ErrorRenderExample.CreateFromDiscriminatorValue },
                { "500", global::Moira.Client.Models.Api.ErrorInternalServerExample.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Moira.Client.Models.Dto.TriggersList>(requestInfo, global::Moira.Client.Models.Dto.TriggersList.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// You can also add filtering by tags, for this purpose add query parameters tags[0]=test, tags[1]=test1 and so onFor example, `/api/trigger/search?tags[0]=test&amp;tags[1]=test1`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Moira.Client.Trigger.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Moira.Client.Trigger.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Moira.Client.Trigger.Search.SearchRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Moira.Client.Trigger.Search.SearchRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Moira.Client.Trigger.Search.SearchRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// You can also add filtering by tags, for this purpose add query parameters tags[0]=test, tags[1]=test1 and so onFor example, `/api/trigger/search?tags[0]=test&amp;tags[1]=test1`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SearchRequestBuilderGetQueryParameters 
        {
            /// <summary>Created By</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("createdBy")]
            public string? CreatedBy { get; set; }
#nullable restore
#else
            [QueryParameter("createdBy")]
            public string CreatedBy { get; set; }
#endif
            /// <summary>Create pager</summary>
            [QueryParameter("createPager")]
            public bool? CreatePager { get; set; }
            /// <summary>Only include problems</summary>
            [QueryParameter("onlyProblems")]
            public bool? OnlyProblems { get; set; }
            /// <summary>Page number</summary>
            [QueryParameter("p")]
            public int? P { get; set; }
            /// <summary>Pager ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("pagerID")]
            public string? PagerID { get; set; }
#nullable restore
#else
            [QueryParameter("pagerID")]
            public string PagerID { get; set; }
#endif
            /// <summary>Page size</summary>
            [QueryParameter("size")]
            public int? Size { get; set; }
            /// <summary>Search text</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("text")]
            public string? Text { get; set; }
#nullable restore
#else
            [QueryParameter("text")]
            public string Text { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
