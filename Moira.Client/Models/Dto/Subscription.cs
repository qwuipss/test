// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Moira.Client.Models.Moira;
using System.Collections.Generic;
using System.IO;
using System;
namespace Moira.Client.Models.Dto
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Subscription : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The any_tags property</summary>
        public bool? AnyTags { get; set; }
        /// <summary>The contacts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Contacts { get; set; }
#nullable restore
#else
        public List<string> Contacts { get; set; }
#endif
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The ignore_recoverings property</summary>
        public bool? IgnoreRecoverings { get; set; }
        /// <summary>The ignore_warnings property</summary>
        public bool? IgnoreWarnings { get; set; }
        /// <summary>The plotting property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Moira.Client.Models.Moira.PlottingData? Plotting { get; set; }
#nullable restore
#else
        public global::Moira.Client.Models.Moira.PlottingData Plotting { get; set; }
#endif
        /// <summary>The sched property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Moira.Client.Models.Moira.ScheduleData? Sched { get; set; }
#nullable restore
#else
        public global::Moira.Client.Models.Moira.ScheduleData Sched { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The team_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TeamId { get; set; }
#nullable restore
#else
        public string TeamId { get; set; }
#endif
        /// <summary>The throttling property</summary>
        public bool? Throttling { get; set; }
        /// <summary>The user property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? User { get; set; }
#nullable restore
#else
        public string User { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Moira.Client.Models.Dto.Subscription"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Moira.Client.Models.Dto.Subscription CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Moira.Client.Models.Dto.Subscription();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "any_tags", n => { AnyTags = n.GetBoolValue(); } },
                { "contacts", n => { Contacts = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "ignore_recoverings", n => { IgnoreRecoverings = n.GetBoolValue(); } },
                { "ignore_warnings", n => { IgnoreWarnings = n.GetBoolValue(); } },
                { "plotting", n => { Plotting = n.GetObjectValue<global::Moira.Client.Models.Moira.PlottingData>(global::Moira.Client.Models.Moira.PlottingData.CreateFromDiscriminatorValue); } },
                { "sched", n => { Sched = n.GetObjectValue<global::Moira.Client.Models.Moira.ScheduleData>(global::Moira.Client.Models.Moira.ScheduleData.CreateFromDiscriminatorValue); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "team_id", n => { TeamId = n.GetStringValue(); } },
                { "throttling", n => { Throttling = n.GetBoolValue(); } },
                { "user", n => { User = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("any_tags", AnyTags);
            writer.WriteCollectionOfPrimitiveValues<string>("contacts", Contacts);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("ignore_recoverings", IgnoreRecoverings);
            writer.WriteBoolValue("ignore_warnings", IgnoreWarnings);
            writer.WriteObjectValue<global::Moira.Client.Models.Moira.PlottingData>("plotting", Plotting);
            writer.WriteObjectValue<global::Moira.Client.Models.Moira.ScheduleData>("sched", Sched);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("team_id", TeamId);
            writer.WriteBoolValue("throttling", Throttling);
            writer.WriteStringValue("user", User);
        }
    }
}
#pragma warning restore CS0618
