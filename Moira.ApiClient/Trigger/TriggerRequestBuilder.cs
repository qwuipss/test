// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Moira.ApiClient.Models.Api;
using Moira.ApiClient.Models.Dto;
using Moira.ApiClient.Trigger.Check;
using Moira.ApiClient.Trigger.Item;
using Moira.ApiClient.Trigger.Noisiness;
using Moira.ApiClient.Trigger.Search;
using Moira.ApiClient.Trigger.Unused;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Moira.ApiClient.Trigger
{
    /// <summary>
    /// Builds and executes requests for operations under \trigger
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TriggerRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The check property</summary>
        public global::Moira.ApiClient.Trigger.Check.CheckRequestBuilder Check
        {
            get => new global::Moira.ApiClient.Trigger.Check.CheckRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The noisiness property</summary>
        public global::Moira.ApiClient.Trigger.Noisiness.NoisinessRequestBuilder Noisiness
        {
            get => new global::Moira.ApiClient.Trigger.Noisiness.NoisinessRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public global::Moira.ApiClient.Trigger.Search.SearchRequestBuilder Search
        {
            get => new global::Moira.ApiClient.Trigger.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The unused property</summary>
        public global::Moira.ApiClient.Trigger.Unused.UnusedRequestBuilder Unused
        {
            get => new global::Moira.ApiClient.Trigger.Unused.UnusedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Moira.ApiClient.trigger.item collection</summary>
        /// <param name="position">Trigger ID</param>
        /// <returns>A <see cref="global::Moira.ApiClient.Trigger.Item.WithTriggerItemRequestBuilder"/></returns>
        public global::Moira.ApiClient.Trigger.Item.WithTriggerItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("triggerID", position);
                return new global::Moira.ApiClient.Trigger.Item.WithTriggerItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Moira.ApiClient.Trigger.TriggerRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TriggerRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/trigger{?validate*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Moira.ApiClient.Trigger.TriggerRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TriggerRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/trigger{?validate*}", rawUrl)
        {
        }
        /// <summary>
        /// Get all triggers
        /// </summary>
        /// <returns>A <see cref="global::Moira.ApiClient.Models.Dto.TriggersList"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Moira.ApiClient.Models.Api.ErrorRenderExample">When receiving a 422 status code</exception>
        /// <exception cref="global::Moira.ApiClient.Models.Api.ErrorInternalServerExample">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Moira.ApiClient.Models.Dto.TriggersList?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Moira.ApiClient.Models.Dto.TriggersList> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "422", global::Moira.ApiClient.Models.Api.ErrorRenderExample.CreateFromDiscriminatorValue },
                { "500", global::Moira.ApiClient.Models.Api.ErrorInternalServerExample.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Moira.ApiClient.Models.Dto.TriggersList>(requestInfo, global::Moira.ApiClient.Models.Dto.TriggersList.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a new trigger
        /// </summary>
        /// <returns>A <see cref="global::Moira.ApiClient.Models.Dto.SaveTriggerResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Moira.ApiClient.Models.Api.ErrorInvalidRequestExample">When receiving a 400 status code</exception>
        /// <exception cref="global::Moira.ApiClient.Models.Api.ErrorRenderExample">When receiving a 422 status code</exception>
        /// <exception cref="global::Moira.ApiClient.Models.Api.ErrorInternalServerExample">When receiving a 500 status code</exception>
        /// <exception cref="global::Moira.ApiClient.Models.Api.ErrorRemoteServerUnavailableExample">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Moira.ApiClient.Models.Dto.SaveTriggerResponse?> PutAsync(global::Moira.ApiClient.Models.Dto.Trigger body, Action<RequestConfiguration<global::Moira.ApiClient.Trigger.TriggerRequestBuilder.TriggerRequestBuilderPutQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Moira.ApiClient.Models.Dto.SaveTriggerResponse> PutAsync(global::Moira.ApiClient.Models.Dto.Trigger body, Action<RequestConfiguration<global::Moira.ApiClient.Trigger.TriggerRequestBuilder.TriggerRequestBuilderPutQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Moira.ApiClient.Models.Api.ErrorInvalidRequestExample.CreateFromDiscriminatorValue },
                { "422", global::Moira.ApiClient.Models.Api.ErrorRenderExample.CreateFromDiscriminatorValue },
                { "500", global::Moira.ApiClient.Models.Api.ErrorInternalServerExample.CreateFromDiscriminatorValue },
                { "503", global::Moira.ApiClient.Models.Api.ErrorRemoteServerUnavailableExample.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Moira.ApiClient.Models.Dto.SaveTriggerResponse>(requestInfo, global::Moira.ApiClient.Models.Dto.SaveTriggerResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get all triggers
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new trigger
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Moira.ApiClient.Models.Dto.Trigger body, Action<RequestConfiguration<global::Moira.ApiClient.Trigger.TriggerRequestBuilder.TriggerRequestBuilderPutQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Moira.ApiClient.Models.Dto.Trigger body, Action<RequestConfiguration<global::Moira.ApiClient.Trigger.TriggerRequestBuilder.TriggerRequestBuilderPutQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Moira.ApiClient.Trigger.TriggerRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Moira.ApiClient.Trigger.TriggerRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Moira.ApiClient.Trigger.TriggerRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TriggerRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Create a new trigger
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TriggerRequestBuilderPutQueryParameters 
        {
            /// <summary>For validating targets</summary>
            [QueryParameter("validate")]
            public bool? Validate { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TriggerRequestBuilderPutRequestConfiguration : RequestConfiguration<global::Moira.ApiClient.Trigger.TriggerRequestBuilder.TriggerRequestBuilderPutQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
