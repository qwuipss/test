// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Moira.ApiClient.Models.Moira;
using System.Collections.Generic;
using System.IO;
using System;
namespace Moira.ApiClient.Models.Dto
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TriggerNoisiness : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A list of targets that have only alone metrics</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Moira.ApiClient.Models.Dto.TriggerNoisiness_alone_metrics? AloneMetrics { get; set; }
#nullable restore
#else
        public global::Moira.ApiClient.Models.Dto.TriggerNoisiness_alone_metrics AloneMetrics { get; set; }
#endif
        /// <summary>Shows the exact cluster from where the metrics are fetched</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClusterId { get; set; }
#nullable restore
#else
        public string ClusterId { get; set; }
#endif
        /// <summary>Datetime when the trigger was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>Username who created trigger</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedBy { get; set; }
#nullable restore
#else
        public string CreatedBy { get; set; }
#endif
        /// <summary>Description string</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Desc { get; set; }
#nullable restore
#else
        public string Desc { get; set; }
#endif
        /// <summary>ERROR threshold</summary>
        public double? ErrorValue { get; set; }
        /// <summary>EventsCount for the trigger.</summary>
        public int? EventsCount { get; set; }
        /// <summary>Used if you need more complex logic than provided by WARN/ERROR values</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expression { get; set; }
#nullable restore
#else
        public string Expression { get; set; }
#endif
        /// <summary>Trigger unique ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Shows if trigger is remote (graphite-backend) based or stored inside Moira-Redis DBDeprecated: Use TriggerSource field instead</summary>
        public bool? IsRemote { get; set; }
        /// <summary>If true, first event NODATA â†’ OK will be omitted</summary>
        public bool? MuteNewMetrics { get; set; }
        /// <summary>Trigger name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Graphite patterns for trigger</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Patterns { get; set; }
#nullable restore
#else
        public List<string> Patterns { get; set; }
#endif
        /// <summary>Determines when Moira should monitor trigger</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Moira.ApiClient.Models.Moira.ScheduleData? Sched { get; set; }
#nullable restore
#else
        public global::Moira.ApiClient.Models.Moira.ScheduleData Sched { get; set; }
#endif
        /// <summary>Set of tags to manipulate subscriptions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>Graphite-like targets: t1, t2, ...</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Targets { get; set; }
#nullable restore
#else
        public List<string> Targets { get; set; }
#endif
        /// <summary>The throttling property</summary>
        public long? Throttling { get; set; }
        /// <summary>Shows the type of source from where the metrics are fetched</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TriggerSource { get; set; }
#nullable restore
#else
        public string TriggerSource { get; set; }
#endif
        /// <summary>Could be: rising, falling, expression</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TriggerType { get; set; }
#nullable restore
#else
        public string TriggerType { get; set; }
#endif
        /// <summary>When there are no metrics for trigger, Moira will switch metric to TTLState state after TTL seconds</summary>
        public long? Ttl { get; set; }
        /// <summary>When there are no metrics for trigger, Moira will switch metric to TTLState state after TTL seconds</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TtlState { get; set; }
#nullable restore
#else
        public string TtlState { get; set; }
#endif
        /// <summary>Datetime  when the trigger was updated</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>Username who updated trigger</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedBy { get; set; }
#nullable restore
#else
        public string UpdatedBy { get; set; }
#endif
        /// <summary>WARN threshold</summary>
        public double? WarnValue { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Moira.ApiClient.Models.Dto.TriggerNoisiness"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Moira.ApiClient.Models.Dto.TriggerNoisiness CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Moira.ApiClient.Models.Dto.TriggerNoisiness();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alone_metrics", n => { AloneMetrics = n.GetObjectValue<global::Moira.ApiClient.Models.Dto.TriggerNoisiness_alone_metrics>(global::Moira.ApiClient.Models.Dto.TriggerNoisiness_alone_metrics.CreateFromDiscriminatorValue); } },
                { "cluster_id", n => { ClusterId = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "created_by", n => { CreatedBy = n.GetStringValue(); } },
                { "desc", n => { Desc = n.GetStringValue(); } },
                { "error_value", n => { ErrorValue = n.GetDoubleValue(); } },
                { "events_count", n => { EventsCount = n.GetIntValue(); } },
                { "expression", n => { Expression = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "is_remote", n => { IsRemote = n.GetBoolValue(); } },
                { "mute_new_metrics", n => { MuteNewMetrics = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "patterns", n => { Patterns = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "sched", n => { Sched = n.GetObjectValue<global::Moira.ApiClient.Models.Moira.ScheduleData>(global::Moira.ApiClient.Models.Moira.ScheduleData.CreateFromDiscriminatorValue); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "targets", n => { Targets = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "throttling", n => { Throttling = n.GetLongValue(); } },
                { "trigger_source", n => { TriggerSource = n.GetStringValue(); } },
                { "trigger_type", n => { TriggerType = n.GetStringValue(); } },
                { "ttl", n => { Ttl = n.GetLongValue(); } },
                { "ttl_state", n => { TtlState = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
                { "updated_by", n => { UpdatedBy = n.GetStringValue(); } },
                { "warn_value", n => { WarnValue = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Moira.ApiClient.Models.Dto.TriggerNoisiness_alone_metrics>("alone_metrics", AloneMetrics);
            writer.WriteStringValue("cluster_id", ClusterId);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteStringValue("created_by", CreatedBy);
            writer.WriteStringValue("desc", Desc);
            writer.WriteDoubleValue("error_value", ErrorValue);
            writer.WriteIntValue("events_count", EventsCount);
            writer.WriteStringValue("expression", Expression);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_remote", IsRemote);
            writer.WriteBoolValue("mute_new_metrics", MuteNewMetrics);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("patterns", Patterns);
            writer.WriteObjectValue<global::Moira.ApiClient.Models.Moira.ScheduleData>("sched", Sched);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteCollectionOfPrimitiveValues<string>("targets", Targets);
            writer.WriteLongValue("throttling", Throttling);
            writer.WriteStringValue("trigger_source", TriggerSource);
            writer.WriteStringValue("trigger_type", TriggerType);
            writer.WriteLongValue("ttl", Ttl);
            writer.WriteStringValue("ttl_state", TtlState);
            writer.WriteStringValue("updated_at", UpdatedAt);
            writer.WriteStringValue("updated_by", UpdatedBy);
            writer.WriteDoubleValue("warn_value", WarnValue);
        }
    }
}
#pragma warning restore CS0618
