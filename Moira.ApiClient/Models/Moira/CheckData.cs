// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Moira.ApiClient.Models.Moira
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CheckData : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The event_timestamp property</summary>
        public long? EventTimestamp { get; set; }
        /// <summary>LastSuccessfulCheckTimestamp - time of the last check of the trigger, during which there were no errors</summary>
        public long? LastSuccessfulCheckTimestamp { get; set; }
        /// <summary>The maintenance property</summary>
        public long? Maintenance { get; set; }
        /// <summary>The maintenance_info property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Moira.ApiClient.Models.Moira.MaintenanceInfo? MaintenanceInfo { get; set; }
#nullable restore
#else
        public global::Moira.ApiClient.Models.Moira.MaintenanceInfo MaintenanceInfo { get; set; }
#endif
        /// <summary>The metrics property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Moira.ApiClient.Models.Moira.CheckData_metrics? Metrics { get; set; }
#nullable restore
#else
        public global::Moira.ApiClient.Models.Moira.CheckData_metrics Metrics { get; set; }
#endif
        /// <summary>MetricsToTargetRelation is a map that holds relation between metric names that was alone during lastcheck and targets that fetched this metric{&quot;t1&quot;: &quot;metric.name.1&quot;, &quot;t2&quot;: &quot;metric.name.2&quot;}</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Moira.ApiClient.Models.Moira.CheckData_metrics_to_target_relation? MetricsToTargetRelation { get; set; }
#nullable restore
#else
        public global::Moira.ApiClient.Models.Moira.CheckData_metrics_to_target_relation MetricsToTargetRelation { get; set; }
#endif
        /// <summary>The msg property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Msg { get; set; }
#nullable restore
#else
        public string Msg { get; set; }
#endif
        /// <summary>The score property</summary>
        public long? Score { get; set; }
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The suppressed property</summary>
        public bool? Suppressed { get; set; }
        /// <summary>The suppressed_state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SuppressedState { get; set; }
#nullable restore
#else
        public string SuppressedState { get; set; }
#endif
        /// <summary>Timestamp - time, which means when the checker last checked this trigger, this value stops updating if the trigger does not receive metrics</summary>
        public long? Timestamp { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Moira.ApiClient.Models.Moira.CheckData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Moira.ApiClient.Models.Moira.CheckData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Moira.ApiClient.Models.Moira.CheckData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "event_timestamp", n => { EventTimestamp = n.GetLongValue(); } },
                { "last_successful_check_timestamp", n => { LastSuccessfulCheckTimestamp = n.GetLongValue(); } },
                { "maintenance", n => { Maintenance = n.GetLongValue(); } },
                { "maintenance_info", n => { MaintenanceInfo = n.GetObjectValue<global::Moira.ApiClient.Models.Moira.MaintenanceInfo>(global::Moira.ApiClient.Models.Moira.MaintenanceInfo.CreateFromDiscriminatorValue); } },
                { "metrics", n => { Metrics = n.GetObjectValue<global::Moira.ApiClient.Models.Moira.CheckData_metrics>(global::Moira.ApiClient.Models.Moira.CheckData_metrics.CreateFromDiscriminatorValue); } },
                { "metrics_to_target_relation", n => { MetricsToTargetRelation = n.GetObjectValue<global::Moira.ApiClient.Models.Moira.CheckData_metrics_to_target_relation>(global::Moira.ApiClient.Models.Moira.CheckData_metrics_to_target_relation.CreateFromDiscriminatorValue); } },
                { "msg", n => { Msg = n.GetStringValue(); } },
                { "score", n => { Score = n.GetLongValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "suppressed", n => { Suppressed = n.GetBoolValue(); } },
                { "suppressed_state", n => { SuppressedState = n.GetStringValue(); } },
                { "timestamp", n => { Timestamp = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("event_timestamp", EventTimestamp);
            writer.WriteLongValue("last_successful_check_timestamp", LastSuccessfulCheckTimestamp);
            writer.WriteLongValue("maintenance", Maintenance);
            writer.WriteObjectValue<global::Moira.ApiClient.Models.Moira.MaintenanceInfo>("maintenance_info", MaintenanceInfo);
            writer.WriteObjectValue<global::Moira.ApiClient.Models.Moira.CheckData_metrics>("metrics", Metrics);
            writer.WriteObjectValue<global::Moira.ApiClient.Models.Moira.CheckData_metrics_to_target_relation>("metrics_to_target_relation", MetricsToTargetRelation);
            writer.WriteStringValue("msg", Msg);
            writer.WriteLongValue("score", Score);
            writer.WriteStringValue("state", State);
            writer.WriteBoolValue("suppressed", Suppressed);
            writer.WriteStringValue("suppressed_state", SuppressedState);
            writer.WriteLongValue("timestamp", Timestamp);
        }
    }
}
#pragma warning restore CS0618
